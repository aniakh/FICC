{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7b3d6387",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Delay Model Evaluation:\n",
      "Score: 88.46\n",
      "Mean Absolute Error: 3.78\n",
      "Mean Squared Error: 58.43\n",
      "Cross validation scores: [0.62097273 0.78705987 0.82077186 0.83242613 0.6884708 ]\n",
      "Cross validation score mean: 0.75 +/- 0.08\n",
      "\n",
      "Total Phase Actual Spending Amount Model Evaluation:\n",
      "Score: 99.12\n",
      "Mean Absolute Error: 22166.67\n",
      "Mean Squared Error: 3465322264.31\n",
      "Cross validation scores: [0.99733127 0.9746698  0.98748873 0.98947217 0.2947066 ]\n",
      "Cross validation score mean: 0.85 +/- 0.28\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "\n",
    "data = pd.read_csv('Processed_Data.csv')\n",
    "\n",
    "X = data.drop(columns = ['week_delays', 'Total Phase Actual Spending Amount'])\n",
    "y1 = data['week_delays']\n",
    "y2 = data['Total Phase Actual Spending Amount']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y1, test_size = 0.15, random_state = 2)\n",
    "\n",
    "model1 = xgb.XGBRegressor()\n",
    "model1.fit(X_train, y_train)\n",
    "\n",
    "X2_train, X2_test, y2_train, y2_test = train_test_split(X, y2, test_size = 0.2, random_state = 1)\n",
    "model2 = xgb.XGBRegressor()\n",
    "model2.fit(X2_train, y2_train)\n",
    "\n",
    "y_pred1 = model1.predict(X_test)\n",
    "y_pred2 = model2.predict(X2_test)\n",
    "\n",
    "accuracy1 = model1.score(X_test, y_test)\n",
    "accuracy2 = model2.score(X2_test, y2_test)\n",
    "\n",
    "mae1 = mean_absolute_error(y_test, y_pred1)\n",
    "mse1 = mean_squared_error(y_test, y_pred1)\n",
    "\n",
    "mae2 = mean_absolute_error(y2_test, y_pred2)\n",
    "mse2 = mean_squared_error(y2_test, y_pred2)\n",
    "\n",
    "print(f'Delay Model Evaluation:')\n",
    "print(f'Score: {accuracy1 * 100:.2f}')\n",
    "print(f'Mean Absolute Error: {mae1:.2f}')\n",
    "print(f'Mean Squared Error: {mse1:.2f}')\n",
    "\n",
    "# Cross validation score for Delay model\n",
    "scores = cross_val_score(model1, X, y1, cv=5)\n",
    "print(f'Cross validation scores: {scores}')\n",
    "print(f'Cross validation score mean: {scores.mean():.2f} +/- {scores.std():.2f}')\n",
    "\n",
    "print()\n",
    "print(f'Total Phase Actual Spending Amount Model Evaluation:')\n",
    "print(f'Score: {accuracy2 * 100:.2f}')\n",
    "print(f'Mean Absolute Error: {mae2:.2f}')\n",
    "print(f'Mean Squared Error: {mse2:.2f}')\n",
    "\n",
    "# Cross validation score for Total Phase Actual Spending Amount model\n",
    "scores = cross_val_score(model2, X, y2, cv=5)\n",
    "print(f'Cross validation scores: {scores}')\n",
    "print(f'Cross validation score mean: {scores.mean():.2f} +/- {scores.std():.2f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c577d6c0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
